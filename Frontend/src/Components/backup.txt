import React, { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import CustomNavbar from '../navbar/Navbar';
import TextInput from '../text/TextInput'; // Import the TextInput component
import TextOutput from '../output/textoutput/textoutput'; // Import the TextOutput component
import { Container, Row, Col } from 'react-bootstrap';
import landing3 from '../images/landing3.jpg'; // Import the new background image
import './Landing.css';
import CustomButton from '../button/Button';
import TextContent from '../TextContent/TextContent';
import Features from '../Features/Features';
import Footer from '..//footer/Footer';
import Info from '../info/Info';
import PDFInput from '../pdf/PDFInput';
import URLInput from '../url/URLInput';

const Landing = () => {
  const [activeComponent, setActiveComponent] = useState(null);
  const [isButtonClicked, setIsButtonClicked] = useState(false);
  const [showTextOutput, setShowTextOutput] = useState(false); // State for showing text output
  const [summarizedText, setSummarizedText] = useState(''); // State for summarized text

  const handlePDFClick = (componentName) => {
    setActiveComponent(componentName);
    setIsButtonClicked(true);
  };

  const handleURLClick = (componentName) => {
    setActiveComponent(componentName);
    setIsButtonClicked(true);
  };

  const handleTextClick = (componentName) => {
    setActiveComponent(componentName);
    setIsButtonClicked(false);
  };

  const handleTextSubmit = (inputText) => {
    // Handle text submission logic here
    setSummarizedText(inputText);
    setShowTextOutput(true);
  };

  const renderComponent = () => {
    switch (activeComponent) {
      case 'PDF':
      case 'URL':
        return (
          <Container fluid>
            <Row className="justify-content-center">
              <Col xs={12} md={8} lg={6} style={{ marginTop: '20px', marginBottom: '30px' }}>
                {activeComponent === 'PDF' && <PDFInput />}
                {activeComponent === 'URL' && <URLInput />}
              </Col>
            </Row>
            {/* Add additional space between PDF/URL component and Info component */}
            <div style={{ marginBottom: '120px' }}></div>
            {isButtonClicked && <hr style={{ border: 'none', borderBottom: '1px solid white', width: '100%' }} />}
            {isButtonClicked && <Info />}
            <Footer />
          </Container>
        );
      case 'TEXT':
        return (
          <Container fluid>
            <Row className="justify-content-center">
              <Col xs={12} md={8} lg={6} style={{ marginTop: '20px', marginBottom: '30px' }}>
                {!showTextOutput ? (
                  <TextInput onSubmit={handleTextSubmit} />
                ) : (
                  <TextOutput summarizedText={summarizedText} />
                )}
              </Col>
            </Row>
            <hr style={{ border: 'none', borderBottom: '1px solid white', width: '100%' }} />
            <Info />
            <Footer />
          </Container>
        );
      default:
        return (
          <>
            <TextContent />
            <CustomButton onPDFClick={handlePDFClick} onURLClick={handleURLClick} onTextClick={handleTextClick} />
            <Features />
            <Info />
            <Footer />
          </>
        );
    }
  };

  return (
    <>
      <CustomNavbar />
      <div
        style={{
          backgroundImage: `url(${landing3})`, // Set background image
          color: 'white',
          paddingTop: '60px',
          minHeight: '100vh',
          overflowX: 'hidden',
          position: 'relative',
        }}
      >
        {renderComponent()}
      </div>
    </>
  );
};

export default Landing;



import React from 'react';
import Button from 'react-bootstrap/Button';
import './Button.css';

function CustomButton({ onPDFClick, onURLClick, onTextClick }) {

  const handlePDFClick = () => {
    if (onPDFClick) {
      onPDFClick('PDF'); // Call onPDFClick prop function with "PDF"
    }
  };

  const handleURLClick = () => {
    if (onURLClick) {
      onURLClick('URL'); // Call onURLClick prop function with "URL"
    }
  };

  const handleTextClick = () => {
    if (onTextClick) {
      onTextClick('TEXT'); // Call onTextClick prop function with "TEXT"
    }
  };

  return (
    <div className="container-fluid mt-4"> {/* Changed 'container' to 'container-fluid' */}
      <div className="row justify-content-center align-items-center">
        <div className="col-sm-12 col-md-4 mb-3 d-grid gap-2">
          <Button variant="dark" className="custom-button mb-2" onClick={handlePDFClick}>
            PDF
          </Button>
        </div>
        <div className="col-sm-12 col-md-4 mb-3 d-grid gap-2">
          <Button variant="dark" className="custom-button mb-2" onClick={handleURLClick}>
            URL
          </Button>
        </div>
        <div className="col-sm-12 col-md-4 mb-3 d-grid gap-2">
          <Button variant="dark" className="custom-button mb-2" onClick={handleTextClick}>
            TEXT
          </Button>
        </div>
      </div>
    </div>
  );
}

export default CustomButton;



import React from 'react';
import Container from 'react-bootstrap/Container';
import Nav from 'react-bootstrap/Nav';
import Navbar from 'react-bootstrap/Navbar';
import { Link, useLocation } from 'react-router-dom'; // Import useHistory
import './Navbar.css';

function CustomNavbar({ textColor, bgColor }) {
  const location = useLocation();

  const handleLogout = () => {
    // Perform logout actions here
    // For now, just redirect to the login page
    window.location.href = "/"; // Redirect to the login page
  };

  return (
    <Navbar style={{ backgroundColor: bgColor, borderBottom: 'none' }} variant="dark" className="custom-navbar" expand="lg" fixed="top">
      <Container fluid>
        <Navbar.Brand as={Link} to="/" href="#home" style={{ color: textColor }}>Research Reimagined</Navbar.Brand>
        <Navbar.Toggle aria-controls="responsive-navbar-nav" />
        <Navbar.Collapse id="responsive-navbar-nav">
          <Nav className="ms-auto me-3">
            <Nav.Link as={Link} to="/about-us" className="nav-link me-3" style={{ color: textColor }}>About Us</Nav.Link>
            <Nav.Link onClick={handleLogout} className="nav-link me-3" style={{ color: textColor }}>Log Out</Nav.Link>
          </Nav>
        </Navbar.Collapse>
      </Container>
    </Navbar>
  );
}

export default CustomNavbar;

import React from 'react';
import { Container, Row, Col, Card } from 'react-bootstrap';

function TextOutput({ summarizedText }) {
  return (
    <Container fluid>
      <Row className="justify-content-center">
        <Col xs={12}>
          <Card>
            <Card.Header style={{ fontWeight: 'bold' }}>Summary</Card.Header>
            <Card.Body style={{ maxHeight: '310px', overflowY: 'auto' }}> {/* Adjust maxHeight and overflowY as per your requirement */}
              {/* Display the summarized text */}
              <p>{summarizedText}</p>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
}

export default TextOutput;



// login.js
import React, { useState } from 'react';
import './login.css';

const LoginForm = ({ onLoginSuccess }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailErrorMsg, setEmailErrorMsg] = useState('');
  const [passwordErrorMsg, setPasswordErrorMsg] = useState('');

  const handleLogin = (event) => {
    event.preventDefault(); // Prevent form submission

    // Validate email
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
      setEmailErrorMsg("Please enter a valid email.");
      return;
    } else {
      setEmailErrorMsg(""); // Clear error message
    }

    // Validate password
    if (password.length < 6) {
      setPasswordErrorMsg("Password must be at least 6 characters.");
      return;
    } else {
      setPasswordErrorMsg(""); // Clear error message
    }

    // Call onLoginSuccess if email and password are valid
    onLoginSuccess();
  };

  return (
    <div className="wrapper">
      <form id="loginForm" onSubmit={handleLogin}>
        <h1>Login</h1>
        <div className="input-box">
          <input type="text" placeholder="Email" required value={email} onChange={(e) => setEmail(e.target.value)} />
          <i className='bx bx-envelope'></i>
        </div>
        <div className="input-box">
          <input type="password" placeholder="Password" required value={password} onChange={(e) => setPassword(e.target.value)} />
          <i className='bx bxs-lock-alt'></i>
        </div>
        <div className="remember-forgot">
          <label>
            <input type="checkbox" />
            Remember me
          </label>
          <a href="#">Forgot password?</a>
        </div>
        <button type="submit" className="btn">Login</button>
        <div className="register-link" id="emailerrormsg">{emailErrorMsg}</div>
        <div className="register-link" id="pswderrorMsg">{passwordErrorMsg}</div>
      </form>
    </div>
  );
};

export default LoginForm;


import React, { useState } from 'react';
import { Container, Row, Col, Card, Form, Button } from 'react-bootstrap';
import TextOutput from '../output/textoutput/textoutput'; // Import the TextOutput component

function TextInput({ onSubmit }) {
  const [textInput, setTextInput] = useState('');
  const [showSummary, setShowSummary] = useState(false); // State to manage whether to display the summary or not

  const handleInputChange = (event) => {
    setTextInput(event.target.value);
  };

  const handleSubmit = () => {
    onSubmit(textInput);
    setShowSummary(true); // Set showSummary to true when submitting the form
    // You can add any further logic here, like clearing the input field
  };

  return (
    <Container fluid>
      <Row className="justify-content-center">
        <Col xs={12}>
          <Card>
            <Card.Header style={{ fontWeight: 'bold' }}>Summarize</Card.Header>
            <Card.Body>
              <Form>
                <Form.Group controlId="textInput">
                  <Form.Label style={{ fontWeight: '600' }}>Enter The Input Text :</Form.Label> {/* Adjust font weight */}
                  <Form.Control 
                    as="textarea"
                    value={textInput} 
                    onChange={handleInputChange} 
                    style={{ 
                      resize: 'none',
                      height: '200px' // Increase the height
                    }}
                  />
                </Form.Group>
                <Button variant="dark" onClick={handleSubmit} style={{ marginTop: '20px' }}>Request for Summary</Button>
              </Form>
            </Card.Body>
          </Card>
        </Col>
      </Row>
      {/* Conditionally render the TextOutput component based on showSummary state */}
      {showSummary && (
        <Row className="justify-content-center">
          <Col xs={12}>
            <TextOutput summarizedText={textInput} />
          </Col>
        </Row>
      )}
    </Container>
  );
}

export default TextInput;



import React, { useState } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import LoginForm from './Components/login/login';
import Landing from './Components/Landing/Landing';
import About from './Components/About/About';
import CustomNavbar from './Components/navbar/Navbar'; // Import the CustomNavbar component

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  const handleLoginSuccess = () => {
    setIsLoggedIn(true);
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
  };

  return (
    <Routes>
      <Route
        path="/"
        element={
          <>
            {/* Always render Navbar */}
            {isLoggedIn ? <Navigate to="/home" /> : <LoginForm onLoginSuccess={handleLoginSuccess} />} {/* Render LoginForm only when not logged in */}
          </>
        }
      />
      <Route path="/home" element={isLoggedIn ? <Landing /> : <Navigate to="/" />} />
      <Route path="/about-us" element={<About />} />
    </Routes>
  );
}

export default App;


* {
    margin: 0px;
    padding: 0;
    box-sizing: border-box;
    font-family: "Poppins", sans-serif;
  }
  
  body {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: url("../images/loginbg7.jpg");
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-position: center;
  }
  
  .wrapper {
    width: 420px;
    background: transparent;
    color: #fff;
    border-radius: 10px;
    padding: 30px 40px;
  }
  
  .wrapper h1 {
    font-size: 36px;
    text-align: center;
    font-weight: 700; /* Increased font weight */
  }
  
  .wrapper .input-box {
    position: relative;
    width: 100%;
    height: 50px;
    margin: 30px 0;
  }
  
  .input-box input {
    width: 100%;
    height: 100%;
    background: transparent;
    border: none;
    outline: none;
    border: 2px solid rgba(255, 255, 255, 0.5);
    border-radius: 40px;
    font-size: 16px;
    color: rgba(255, 255, 255, 0.7); /* Increased opacity for text */
    padding: 20px 45px 20px 20px;
  }
  
  .input-box input::placeholder {
    color: rgba(255, 255, 255, 0.9); /* Increased opacity for placeholder text */
  }
  
  .input-box i {
    position: absolute;
    right: 20px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 20px;
  }
  
  .wrapper .remember-forgot {
    display: flex;
    justify-content: space-between;
    font-size: 14.5px;
    margin: -15px 0 15px;
  }
  
  .remember-forgot label input {
    accent-color: #fff;
    margin-right: 3px;
  }
  
  .remember-forgot a {
    color: #fff;
    text-decoration: none;
  }
  
  .remember-forgot a:hover {
    text-decoration: underline;
  }
  
  .wrapper .btn {
    width: 100%;
    height: 45px;
    border: 2px solid rgba(255, 255, 255, 0.5);
    border-radius: 40px;
    background-color: #fff;
    outline: none;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    font-size: 16px;
    color: #333;
    font-weight: 600;
  }
  
  .wrapper .register-link {
    font-size: 14.5px;
    text-align: center;
    margin: 20px 0 15px;
  }
  
  .register-link p a {
    color: #fff;
    text-decoration: none;
    font-weight: 600;
  }
  
  .register-link p a:hover {
    text-decoration: underline;
  }
  
  .input-box {
    position: relative;
  }
  .wrapper .btn:hover {
    background-color: white;
    cursor: pointer; /* Change cursor to pointer on hover */
    color: black;
  }
  



// login.js
import React, { useState } from 'react';
import './login.css';

const LoginForm = ({ onLoginSuccess }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailErrorMsg, setEmailErrorMsg] = useState('');
  const [passwordErrorMsg, setPasswordErrorMsg] = useState('');

  const handleLogin = (event) => {
    event.preventDefault(); // Prevent form submission

    // Validate email
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
      setEmailErrorMsg("Please enter a valid email.");
      return;
    } else {
      setEmailErrorMsg(""); // Clear error message
    }

    // Validate password
    if (password.length < 6) {
      setPasswordErrorMsg("Password must be at least 6 characters.");
      return;
    } else {
      setPasswordErrorMsg(""); // Clear error message
    }

    // Call onLoginSuccess if email and password are valid
    onLoginSuccess();
  };

  return (
    <div className="wrapper">
      <form id="loginForm" onSubmit={handleLogin}>
        <h1>Login</h1>
        <div className="input-box">
          <input type="text" placeholder="Email" required value={email} onChange={(e) => setEmail(e.target.value)} />
          <i className='bx bx-envelope'></i>
        </div>
        <div className="input-box">
          <input type="password" placeholder="Password" required value={password} onChange={(e) => setPassword(e.target.value)} />
          <i className='bx bxs-lock-alt'></i>
        </div>
        <div className="remember-forgot">
          <label>
            <input type="checkbox" />
            Remember me
          </label>
          <a href="#">Forgot password?</a>
        </div>
        <button type="submit" className="btn">Login</button>
        <div className="register-link" id="emailerrormsg">{emailErrorMsg}</div>
        <div className="register-link" id="pswderrorMsg">{passwordErrorMsg}</div>
      </form>
    </div>
  );
};

export default LoginForm;





import React, { useState } from 'react';
import './login.css';

const LoginForm = ({ onLoginSuccess }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [emailErrorMsg, setEmailErrorMsg] = useState('');
  const [passwordErrorMsg, setPasswordErrorMsg] = useState('');

  const handleLogin = (event) => {
    event.preventDefault(); // Prevent form submission

    // Validate email
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailPattern.test(email)) {
      setEmailErrorMsg("Please enter a valid email.");
      return;
    } else {
      setEmailErrorMsg(""); // Clear error message
    }

    // Validate password
    if (password.length < 6) {
      setPasswordErrorMsg("Password must be at least 6 characters.");
      return;
    } else {
      setPasswordErrorMsg(""); // Clear error message
    }

    // Call onLoginSuccess if email and password are valid
    onLoginSuccess();
  };

  return (
    <div className="wrapper">
      <form id="loginForm" onSubmit={handleLogin}>
        <h1>Login</h1>
        <div className="input-box">
          <input type="text" placeholder="Email" required value={email} onChange={(e) => setEmail(e.target.value)} />
          <i className='bx bx-envelope'></i>
        </div>
        <div className="input-box">
          <input type="password" placeholder="Password" required value={password} onChange={(e) => setPassword(e.target.value)} />
          <i className='bx bxs-lock-alt'></i>
        </div>
        <div className="remember-forgot">
          <label>
            <input type="checkbox" />
            Remember me
          </label>
          <a href="#">Forgot password?</a>
        </div>
        <button type="submit" className="btn">Login</button>
        <div className="register-link" id="emailerrormsg">{emailErrorMsg}</div>
        <div className="register-link" id="pswderrorMsg">{passwordErrorMsg}</div>
        <div className="register-link">Don't Have An Account? <a href="#">Sign up</a></div>
      </form>
    </div>
  );
};

export default LoginForm;

